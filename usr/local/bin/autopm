#!/bin/python3

import time
from typing import NamedTuple, Dict
import sys
import os
import subprocess


# One might want to have this 0 if another thing controls epp mode
CHANGE_EPP_ALLOWED = 1

# One might not want to have ryzenadj values changed
# Silverblue users for example can't install it globally atm
# perhaps an adjustable path would be solution (?)
RYZENADJ_ALLOWED = 0


class PowerSettings(NamedTuple):
    ryzenadj_params: str # parameters to use when calling ryzenadj
    governor: str  # conservative ondemand userspace powersave performance schedutil
    amd_epp: str  # change the epp mode (default performance balance_performance balance_power power)
    amd_pstate: str # the amd_pstate driver mode (active, passive, guided)


power_modes: Dict[str, PowerSettings] = {
    # Power-Saver profile
    "power-saver" : PowerSettings("--tctl-temp=95 --apu-skin-temp=45 --stapm-limit=6000  --fast-limit=6000 --stapm-time=64 --slow-limit=6000 --slow-time=128 --vrm-current=180000 --vrmmax-current=180000 --vrmsoc-current=180000 --vrmsocmax-current=180000 --vrmgfx-current=180000", "powersave", "power", "active"),
    
    # Balanced profile
    "balanced"    : PowerSettings("--tctl-temp=95 --apu-skin-temp=45 --stapm-limit=35000  --fast-limit=45000 --stapm-time=64 --slow-limit=38000 --slow-time=128 --vrm-current=180000 --vrmmax-current=180000 --vrmsoc-current=180000 --vrmsocmax-current=180000 --vrmgfx-current=180000", "powersave", "balance_performance", "active"),
    
    # Performance profile
    "performance" : PowerSettings("--tctl-temp=95 --apu-skin-temp=95 --stapm-limit=45000  --fast-limit=55000 --stapm-time=64 --slow-limit=50000 --slow-time=128 --vrm-current=180000 --vrmmax-current=180000 --vrmsoc-current=180000 --vrmsocmax-current=180000 --vrmgfx-current=180000", "performance", "performance", "active")
}

current_power_profile: str = ""


def runCommand(command: str) -> None:
    subprocess.run(command, shell=True)


def getCommandOutput(command: str) -> str:
    return subprocess.run(command, capture_output=True, shell=True).stdout.decode("utf-8").rstrip('\n')


def print(output: str) -> None:
    runCommand(f"echo \"{output}\"")


def readFromFile(path: str) -> str:
    file = open(path, 'r')
    text = file.read()
    file.close()
    return text.rstrip('\n')


def writeToFile(path: str, content: str) -> None:
    file = open(path, 'w')
    file.write(content)
    file.close()


def setGovernor(mode: str) -> None:
    cpu_gov: str = readFromFile("/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor")
    
    if(cpu_gov == power_modes[mode].governor):
        return

    cpu_gov = power_modes[mode].governor
    
    print(f"{mode} profile: setting {cpu_gov} governor")
    
    dir_prefix: str = "/sys/devices/system/cpu/cpu"
    dir_suffix: str = "/cpufreq/scaling_governor" 
    cpu_cores: int = int(getCommandOutput("grep -c processor /proc/cpuinfo"))
    
    for coreNumb in range(0, cpu_cores):
        path: str = dir_prefix + str(coreNumb) + dir_suffix
        try:
            writeToFile(path, cpu_gov)
        except:
            print("Could not change current governor")


def setEpp(mode: str) -> None:
    current_pstate = readFromFile("/sys/devices/system/cpu/amd_pstate/status")
    
    if(current_pstate != "active"):
        return
    current_epp = readFromFile("/sys/devices/system/cpu/cpu0/cpufreq/energy_performance_preference")

    if(current_epp == power_modes[mode].amd_epp or CHANGE_EPP_ALLOWED == 0):
        return

    current_epp = power_modes[mode].amd_epp

    print(f"{mode} profile: setting epp to {current_epp}")

    dir_prefix: str = "/sys/devices/system/cpu/cpu"
    dir_suffix: str = "/cpufreq/energy_performance_preference" 
    cpu_cores: int = int(getCommandOutput("grep -c processor /proc/cpuinfo"))
    
    for coreNumb in range(0, cpu_cores):
        path: str = dir_prefix + str(coreNumb) + dir_suffix
        try:
            writeToFile(path, current_epp)
        except:
            print("Could not change current epp")


def setPowerLimits(mode: str) -> None:
    if(RYZENADJ_ALLOWED == 0):
        return 

    runCommand("ryzenadj " + power_modes[mode].ryzenadj_params)


def setPstate(mode: str) -> None:
    current_pstate = readFromFile("/sys/devices/system/cpu/amd_pstate/status")
    
    if(current_pstate == power_modes[mode].amd_pstate):
        return
    
    current_pstate = power_modes[mode].amd_pstate
    
    print(f"{mode} profile: setting amd_pstate to {current_pstate}")

    writeToFile("/sys/devices/system/cpu/amd_pstate/status", current_pstate)


def managePower() -> None:
    power_profile: str = getCommandOutput("powerprofilesctl get")
    global current_power_profile
    
    if(current_power_profile == power_profile):
        return

    current_power_profile = power_profile

    setPstate(power_profile)
    setEpp(power_profile)
    setGovernor(power_profile)
    setPowerLimits(power_profile)


def isRoot() -> bool:
    return (os.getuid() == 0)


def startup() -> None:
    ac_status: str = readFromFile("/sys/class/power_supply/AC0/online")
    if(int(ac_status) == 1): # Charger plugged
        runCommand("asusctl profile -P Balanced")
    else: # Running on battery
        runCommand("asusctl profile -P Quiet")


def main() -> None:
    if not isRoot():
        sys.exit("Error: Script must be run as root")
    startup()
    time.sleep(5)
    while True:
        managePower()
        time.sleep(10)


if __name__ == "__main__":
    main()
